import asyncio

from db import init_db, close_db
from config.logging import app_logger as logger
from models.models import Task


data_tasks = [
    {
        "name": "Скотч",
        "question": """Перед вами задача встать в круги без помощи рук передать скотч друг другу.Но если вам кажется, что это просто … Сделать это нужно только с помощью коленей. """,
    },
    {
        "name": "Пазл",
        "question": """
        Участникам показывается абстрактная картина, 
        сделанная с помощью ии, 
        на которой изображены достопримечательность питера. 
        в пазл добавлены лишние детали (шпили, окна, двери, колонны),
        которых нет на этой локации в реальности,
        участники должны вспомнить как выглядит та или 
        иная достопримечательность и собрать ее без лишних частей.
        """,
    },
    {
        "name": "Собери слово",
        "question": """
        Команда получает набор координат,
         где спрятаны QR-коды. Каждый код даёт 
         одну букву. В конце им нужно составить 
         правильно слово и сказать его модераторам. Правильное слово: "Балет".
        """,
    },
    {
        "name": "Семейный фотоальбом",
        "question": """
        Перед собой вы видите альбом с фотографиями и реквизит.
        Сделайте максимально идентичные снимки,
         используя соответствующие места съёмок, реквизит, позы.
        """,
    },
    {
        "name": "Мэтч",
        "question": """
        Участникам даётся три фотографии,
          сделанные где-то неподалёку от
            станции и прошедшие обработку 
            нейросетями. Задача команды - 
            найти место съёмки и подобрать 
            такой угол, чтобы фотография по контурам 
            совпала с реальными объектами. 
        """,
    },
    {
        "name": "Точки опоры",
        "question": """
        Вам необходимо встать на 7 точек опоры и 
        продержаться 30 секунд. Проходить это 
        задание необходимо в идеальной тишине.
          Думаете, это просто? Осторожно,
            количество опор уменьшается, следите
              за командой кураторов.
        """,
    },
    {
        "name": "Скультптор и глина ",
        "question": """
        Капитан команды выступает в роли скульптора,
        он-единственный, кто знает,
        какую позу нужно сделать команде. 
        Его задача- "сваять" из своих сокомандников
        инсталляцию/сцену из фильма. 
        Участники должны по инсталляции угадать 
        что за фильм они показывают.
        Капитан не может говорить, 
        только указывать жестами/двигать людей.
        Позы:
        1. Петр 1 прорубает окно в Европу
        2. Медный всадник
        3. Восстание декабристов
        4. Заседание в пышечной за кофе
        5. Кунсткамера
        6. Выступление Виктора Цоя
        7. Развод мостов
        """,
    },
    {
        "name": "Крестики - нолики",
        "question": """
        Участникам необходимо сыграть в усложнённые 
        крестики-нолики с организаторами.
        Но они не просто рисуют крестики-нолики на поле,
        а должны с расстояния попасть в ту ячейку, которая необходима для хода.
        """,
    },
    {
        "name": "Упади конверт",
        "question": """
        Перед участниками лежит на дощечке 
        синий конверт. У каждого члена команды есть
        одна попытка перевернуть синий конверт 
        красным.
        """,
    },
    {
        "name": "Ребус",
        "question": """
        Команду делят на 2 группы (по 5 человек),
        каждым даётся ребус/задачка,
        где ответ известный памятник/достопримечательность питера, 
        как только обе команды понимают о чём речь,
        они должны построить из себя эту достопримечательность,
         не говоря слов и объяснить сокомандникам из другой группы. 
        """,
    },
]


async def create_tasks():
    await init_db()
    # перед мероприятием поменять дефолтный пароль
    try:
        tasks = await Task.all()
        if tasks == []:
            new_tasks = []
            """
            СОЗДАЮ ЗАДАЧИ
            """
            for task in data_tasks:
                new_tasks.append(
                    Task(name=task["name"], question=task["question"])
                )
            logger.info(new_tasks)

            await Task.bulk_create(new_tasks)
            logger.info("10 tasks created! if not exist")

    except:
        logger.error("db connection error")
        raise
    finally:
        await close_db()


if __name__ == "__main__":
    asyncio.run(create_tasks())
